cryptography demo:



if the string "auth" is posted under person/woman/man/camera/tv in the DecTree, the following should be the ToString() method's output given the current hash function.

[<>,,,[<>,,,,,[<>,,,,,[<>,,,,[<>,,,,,[<>[<>[<>,,,[<>,,,,,,,,,[<>,,,,,[<>[<>,[<>,,,,,,[<>,,,,,[<>,,[<>,,,,[<>,,,,,,[<>,,,,,,,,[<>,,,,,[<>,,,,,,,,,,[<auth>,,,,,,,,,,,,],,],,,,,,,],,,,],,,,,,],,,,,,,,],,,,,,,,,,],,,,,,,],,,,,,],,,,,,,,,,,],,,,,,,,,,,,],,,,,,,],,,],,,,,,,,,],,,,,,,,,,,,],,,,,,,,,,,,],,,,,,,],,,,,,,,],,,,,,,],,,,,,,],,,,,,,,,]

would you consider this safe enough to store your nuke codes, per instance? what if "[<>,,,[<>,,,,,[<>,,,,,[<>,,,,[<>,,,,,[<>[<>[<>,,,[<>,,,,,,,,,[<>,,,,,[<>[<>,[<>,,,,,,[<>,,,,,[<>,,[<>,,,,[<>,,,,,,[<>,,,,,,,,[<>,,,,,[<>,,,,,,,,,,[<nukecode:true;>,,,,,,,,,,,,],,],,,,,,,],,,,],,,,,,],,,,,,,,],,,,,,,,,,],,,,,,,],,,,,,],,,,,,,,,,,],,,,,,,,,,,,],,,,,,,],,,],,,,,,,,,],,,,,,,,,,,,],,,,,,,,,,,,],,,,,,,],,,,,,,,],,,,,,,],,,,,,,],,,,,,,,,]" is the new nuke code, based on the organization of the first?

Then in a new DecTree, [<>[<>,,,[<>,,,,,,[<>,,[<>,,,[<>,,,,,,,[<>,,,,,,,,,[<>,[<>,,,,,,,,,,,,],,,,,,,,,,,],,,],,,,,],,,,,,,,,],,,,,,,,,,],,,,,,],,,,,,,,,],,,,,,,,,,,,] WOULD be the ToString() method's output given a recursive input. Unless you have the initial conditions, the exact state of the DecTree's ToString() method would HAVE to be indeterminate if given the problem "what is the nuclear code?" which accepts a single string-value solutiond which uses the key, "person woman man camera tv" IF AND ONLY IF the intermediate hash function and the key entry mechanism is unknown to the solver.

This might demonstrate a perspective difference between a problem which is solvable in a deterministic polynomial time by a verifying agent and a solver which is not by a solver which doesn't have the necessary algorithm to make the procedure of {verifying the base case (the corroboration of a second-degree storage of "auth" under person/woman/man/camera/tv)} a single-procedure operation, which is the minimum qualification of a certainly accurate answer. A random (O(1)) solution will always exist: a lookup table solution (in this case, it would be an indication that "[<>[<>,,,[<>,,,,,,[<>,,[<>,,,[<>,,,,,,,[<>,,,,,,,,,[<>,[<>,,,,,,,,,,,,],,,,,,,,,,,],,,],,,,,],,,,,,,,,],,,,,,,,,,],,,,,,],,,,,,,,,],,,,,,,,,,,,]" is the solution), which given any non-superficially-inflated input language size is as good as a random guess. I submit that in this particularly-demonstrated case, the person/woman/man/camera/tv path may be slightly variant; while following a generally consistent pattern, if the first and second characters are adjusted oppositely to the third character (relative to a valid Unicode value) or the first and third characters are adjusted oppositely to the fourth character or other patterns relative to single dot-product prime number-based encryption as this demonstration follows.The solving agent MUST have a basic String Characteristic which corresponds to 19808502 in the demonstrated case. The conversions to other String Characteristic correspondents DO exist, so the obtention of the String Characteristic cannot be a single-operation process more simple than it being pre-written in a sort of recording. Assuming a system-wide classical statistical consistency which forbids an answer from being solved through a superpositional brute force (i.e. concurrently multithreading multiple String Characteristic/Hash Function combinations), this kind of problem should be NP-complete. A demonstration can be run- using this Visual Studio Solution.

Kenton A. Guarian
15 September 2020, 22:38 PST